package jpsteed.professionals.convertertests;

import static org.junit.Assert.*;

import java.math.BigDecimal;

import org.junit.Test;

import jpsteed.professionals.converters.LengthConverter;
import jpsteed.professionals.converters.ConversionLiterals.Unit;

/**
 * Test LengthConverter functions in package jpsteed.professionals.converters.
 * Using input values -2e6, -250, 0, 250, and 2e6.
 * @author John-Paul Steed
 * Tested March 31, 2016
 *
 */
public class LengthTest {
	// Test input data.
	double[] testData = {-2e6, -250, 0, 250, 2e6};
	
	// Length Units
	Unit[] lengthUnits = {Unit.INCH, Unit.FOOT, Unit.YARD, Unit.MILE,
			Unit.PICOMETER, Unit.NANOMETER, Unit.MICROMETER, 
			Unit.MILLIMETER, Unit.CENTIMETER, Unit.DECIMETER, Unit.METER,
			Unit.KILOMETER, Unit.MEGAMETER, Unit.GIGAMETER};

	// -2,000,000 test
	double[] lengthData1 = {
			-2.000000000E+06,	-2.400000000E+07,	-7.200000000E+07,	-1.267200000E+11,	-7.874015748E-05,	-7.874015748E-02,	-7.874015748E+01,	-7.874015748E+04,	-7.874015748E+05,	-7.874015748E+06,	-7.874015748E+07,	-7.874015748E+10,	-7.874015748E+13,	-7.874015748E+16,
			-1.666666700E+05,	-2.000000000E+06,	-6.000000000E+06,	-1.056000000E+10,	-6.561679790E-06,	-6.561679790E-03,	-6.561679790E+00,	-6.561679790E+03,	-6.561679790E+04,	-6.561679790E+05,	-6.561679790E+06,	-6.561679790E+09,	-6.561679790E+12,	-6.561679790E+15,
			-5.555555600E+04,	-6.666666700E+05,	-2.000000000E+06,	-3.520000000E+09,	-2.187226597E-06,	-2.187226597E-03,	-2.187226597E+00,	-2.187226597E+03,	-2.187226597E+04,	-2.187226597E+05,	-2.187226597E+06,	-2.187226597E+09,	-2.187226597E+12,	-2.187226597E+15,
			-3.156565700E+01,	-3.787878800E+02,	-1.136363600E+03,	-2.000000000E+06,	-1.242742384E-09,	-1.242742384E-06,	-1.242742384E-03,	-1.242742384E+00,	-1.242742384E+01,	-1.242742384E+02,	-1.242742384E+03,	-1.242742384E+06,	-1.242742384E+09,	-1.242742384E+12,
			-5.080000000E+16,	-6.096000000E+17,	-1.828800000E+18,	-3.218688000E+21,	-2.000000000E+06,	-2.000000000E+09,	-2.000000000E+12,	-2.000000000E+15,	-2.000000000E+16,	-2.000000000E+17,	-2.000000000E+18,	-2.000000000E+21,	-2.000000000E+24,	-2.000000000E+27,
			-5.080000000E+13,	-6.096000000E+14,	-1.828800000E+15,	-3.218688000E+18,	-2.000000000E+03,	-2.000000000E+06,	-2.000000000E+09,	-2.000000000E+12,	-2.000000000E+13,	-2.000000000E+14,	-2.000000000E+15,	-2.000000000E+18,	-2.000000000E+21,	-2.000000000E+24,
			-5.080000000E+10,	-6.096000000E+11,	-1.828800000E+12,	-3.218688000E+15,	-2.000000000E+00,	-2.000000000E+03,	-2.000000000E+06,	-2.000000000E+09,	-2.000000000E+10,	-2.000000000E+11,	-2.000000000E+12,	-2.000000000E+15,	-2.000000000E+18,	-2.000000000E+21,
			-5.080000000E+07,	-6.096000000E+08,	-1.828800000E+09,	-3.218688000E+12,	-2.000000000E-03,	-2.000000000E+00,	-2.000000000E+03,	-2.000000000E+06,	-2.000000000E+07,	-2.000000000E+08,	-2.000000000E+09,	-2.000000000E+12,	-2.000000000E+15,	-2.000000000E+18,
			-5.080000000E+06,	-6.096000000E+07,	-1.828800000E+08,	-3.218688000E+11,	-2.000000000E-04,	-2.000000000E-01,	-2.000000000E+02,	-2.000000000E+05,	-2.000000000E+06,	-2.000000000E+07,	-2.000000000E+08,	-2.000000000E+11,	-2.000000000E+14,	-2.000000000E+17,
			-5.080000000E+05,	-6.096000000E+06,	-1.828800000E+07,	-3.218688000E+10,	-2.000000000E-05,	-2.000000000E-02,	-2.000000000E+01,	-2.000000000E+04,	-2.000000000E+05,	-2.000000000E+06,	-2.000000000E+07,	-2.000000000E+10,	-2.000000000E+13,	-2.000000000E+16,
			-5.080000000E+04,	-6.096000000E+05,	-1.828800000E+06,	-3.218688000E+09,	-2.000000000E-06,	-2.000000000E-03,	-2.000000000E+00,	-2.000000000E+03,	-2.000000000E+04,	-2.000000000E+05,	-2.000000000E+06,	-2.000000000E+09,	-2.000000000E+12,	-2.000000000E+15,
			-5.080000000E+01,	-6.096000000E+02,	-1.828800000E+03,	-3.218688000E+06,	-2.000000000E-09,	-2.000000000E-06,	-2.000000000E-03,	-2.000000000E+00,	-2.000000000E+01,	-2.000000000E+02,	-2.000000000E+03,	-2.000000000E+06,	-2.000000000E+09,	-2.000000000E+12,
			-5.080000000E-02,	-6.096000000E-01,	-1.828800000E+00,	-3.218688000E+03,	-2.000000000E-12,	-2.000000000E-09,	-2.000000000E-06,	-2.000000000E-03,	-2.000000000E-02,	-2.000000000E-01,	-2.000000000E+00,	-2.000000000E+03,	-2.000000000E+06,	-2.000000000E+09,
			-5.080000000E-05,	-6.096000000E-04,	-1.828800000E-03,	-3.218688000E+00,	-2.000000000E-15,	-2.000000000E-12,	-2.000000000E-09,	-2.000000000E-06,	-2.000000000E-05,	-2.000000000E-04,	-2.000000000E-03,	-2.000000000E+00,	-2.000000000E+03,	-2.000000000E+06

	};
	
	// -250 test
	double[] lengthData2 = {
			-2.500000000E+02,	-3.000000000E+03,	-9.000000000E+03,	-1.584000000E+07,	-9.842519685E-09,	-9.842519685E-06,	-9.842519685E-03,	-9.842519685E+00,	-9.842519685E+01,	-9.842519685E+02,	-9.842519685E+03,	-9.842519685E+06,	-9.842519685E+09,	-9.842519685E+12,
			-2.083333375E+01,	-2.500000000E+02,	-7.500000000E+02,	-1.320000000E+06,	-8.202099737E-10,	-8.202099737E-07,	-8.202099738E-04,	-8.202099738E-01,	-8.202099738E+00,	-8.202099738E+01,	-8.202099738E+02,	-8.202099738E+05,	-8.202099738E+08,	-8.202099738E+11,
			-6.944444500E+00,	-8.333333375E+01,	-2.500000000E+02,	-4.400000000E+05,	-2.734033246E-10,	-2.734033246E-07,	-2.734033246E-04,	-2.734033246E-01,	-2.734033246E+00,	-2.734033246E+01,	-2.734033246E+02,	-2.734033246E+05,	-2.734033246E+08,	-2.734033246E+11,
			-3.945707125E-03,	-4.734848500E-02,	-1.420454500E-01,	-2.500000000E+02,	-1.553427981E-13,	-1.553427981E-10,	-1.553427981E-07,	-1.553427981E-04,	-1.553427981E-03,	-1.553427981E-02,	-1.553427981E-01,	-1.553427981E+02,	-1.553427981E+05,	-1.553427981E+08,
			-6.350000000E+12,	-7.620000000E+13,	-2.286000000E+14,	-4.023360000E+17,	-2.500000000E+02,	-2.500000000E+05,	-2.500000000E+08,	-2.500000000E+11,	-2.500000000E+12,	-2.500000000E+13,	-2.500000000E+14,	-2.500000000E+17,	-2.500000000E+20,	-2.500000000E+23,
			-6.350000000E+09,	-7.620000000E+10,	-2.286000000E+11,	-4.023360000E+14,	-2.500000000E-01,	-2.500000000E+02,	-2.500000000E+05,	-2.500000000E+08,	-2.500000000E+09,	-2.500000000E+10,	-2.500000000E+11,	-2.500000000E+14,	-2.500000000E+17,	-2.500000000E+20,
			-6.350000000E+06,	-7.620000000E+07,	-2.286000000E+08,	-4.023360000E+11,	-2.500000000E-04,	-2.500000000E-01,	-2.500000000E+02,	-2.500000000E+05,	-2.500000000E+06,	-2.500000000E+07,	-2.500000000E+08,	-2.500000000E+11,	-2.500000000E+14,	-2.500000000E+17,
			-6.350000000E+03,	-7.620000000E+04,	-2.286000000E+05,	-4.023360000E+08,	-2.500000000E-07,	-2.500000000E-04,	-2.500000000E-01,	-2.500000000E+02,	-2.500000000E+03,	-2.500000000E+04,	-2.500000000E+05,	-2.500000000E+08,	-2.500000000E+11,	-2.500000000E+14,
			-6.350000000E+02,	-7.620000000E+03,	-2.286000000E+04,	-4.023360000E+07,	-2.500000000E-08,	-2.500000000E-05,	-2.500000000E-02,	-2.500000000E+01,	-2.500000000E+02,	-2.500000000E+03,	-2.500000000E+04,	-2.500000000E+07,	-2.500000000E+10,	-2.500000000E+13,
			-6.350000000E+01,	-7.620000000E+02,	-2.286000000E+03,	-4.023360000E+06,	-2.500000000E-09,	-2.500000000E-06,	-2.500000000E-03,	-2.500000000E+00,	-2.500000000E+01,	-2.500000000E+02,	-2.500000000E+03,	-2.500000000E+06,	-2.500000000E+09,	-2.500000000E+12,
			-6.350000000E+00,	-7.620000000E+01,	-2.286000000E+02,	-4.023360000E+05,	-2.500000000E-10,	-2.500000000E-07,	-2.500000000E-04,	-2.500000000E-01,	-2.500000000E+00,	-2.500000000E+01,	-2.500000000E+02,	-2.500000000E+05,	-2.500000000E+08,	-2.500000000E+11,
			-6.350000000E-03,	-7.620000000E-02,	-2.286000000E-01,	-4.023360000E+02,	-2.500000000E-13,	-2.500000000E-10,	-2.500000000E-07,	-2.500000000E-04,	-2.500000000E-03,	-2.500000000E-02,	-2.500000000E-01,	-2.500000000E+02,	-2.500000000E+05,	-2.500000000E+08,
			-6.350000000E-06,	-7.620000000E-05,	-2.286000000E-04,	-4.023360000E-01,	-2.500000000E-16,	-2.500000000E-13,	-2.500000000E-10,	-2.500000000E-07,	-2.500000000E-06,	-2.500000000E-05,	-2.500000000E-04,	-2.500000000E-01,	-2.500000000E+02,	-2.500000000E+05,
			-6.350000000E-09,	-7.620000000E-08,	-2.286000000E-07,	-4.023360000E-04,	-2.500000000E-19,	-2.500000000E-16,	-2.500000000E-13,	-2.500000000E-10,	-2.500000000E-09,	-2.500000000E-08,	-2.500000000E-07,	-2.500000000E-04,	-2.500000000E-01,	-2.500000000E+02

	};
	
	// 0 test 
	double[] lengthData3 = new double[196];
	
	// 250 test
	double[] lengthData4 = {
			2.500000000E+02,	3.000000000E+03,	9.000000000E+03,	1.584000000E+07,	9.842519685E-09,	9.842519685E-06,	9.842519685E-03,	9.842519685E+00,	9.842519685E+01,	9.842519685E+02,	9.842519685E+03,	9.842519685E+06,	9.842519685E+09,	9.842519685E+12,
			2.083333375E+01,	2.500000000E+02,	7.500000000E+02,	1.320000000E+06,	8.202099737E-10,	8.202099737E-07,	8.202099738E-04,	8.202099738E-01,	8.202099738E+00,	8.202099738E+01,	8.202099738E+02,	8.202099738E+05,	8.202099738E+08,	8.202099738E+11,
			6.944444500E+00,	8.333333375E+01,	2.500000000E+02,	4.400000000E+05,	2.734033246E-10,	2.734033246E-07,	2.734033246E-04,	2.734033246E-01,	2.734033246E+00,	2.734033246E+01,	2.734033246E+02,	2.734033246E+05,	2.734033246E+08,	2.734033246E+11,
			3.945707125E-03,	4.734848500E-02,	1.420454500E-01,	2.500000000E+02,	1.553427981E-13,	1.553427981E-10,	1.553427981E-07,	1.553427981E-04,	1.553427981E-03,	1.553427981E-02,	1.553427981E-01,	1.553427981E+02,	1.553427981E+05,	1.553427981E+08,
			6.350000000E+12,	7.620000000E+13,	2.286000000E+14,	4.023360000E+17,	2.500000000E+02,	2.500000000E+05,	2.500000000E+08,	2.500000000E+11,	2.500000000E+12,	2.500000000E+13,	2.500000000E+14,	2.500000000E+17,	2.500000000E+20,	2.500000000E+23,
			6.350000000E+09,	7.620000000E+10,	2.286000000E+11,	4.023360000E+14,	2.500000000E-01,	2.500000000E+02,	2.500000000E+05,	2.500000000E+08,	2.500000000E+09,	2.500000000E+10,	2.500000000E+11,	2.500000000E+14,	2.500000000E+17,	2.500000000E+20,
			6.350000000E+06,	7.620000000E+07,	2.286000000E+08,	4.023360000E+11,	2.500000000E-04,	2.500000000E-01,	2.500000000E+02,	2.500000000E+05,	2.500000000E+06,	2.500000000E+07,	2.500000000E+08,	2.500000000E+11,	2.500000000E+14,	2.500000000E+17,
			6.350000000E+03,	7.620000000E+04,	2.286000000E+05,	4.023360000E+08,	2.500000000E-07,	2.500000000E-04,	2.500000000E-01,	2.500000000E+02,	2.500000000E+03,	2.500000000E+04,	2.500000000E+05,	2.500000000E+08,	2.500000000E+11,	2.500000000E+14,
			6.350000000E+02,	7.620000000E+03,	2.286000000E+04,	4.023360000E+07,	2.500000000E-08,	2.500000000E-05,	2.500000000E-02,	2.500000000E+01,	2.500000000E+02,	2.500000000E+03,	2.500000000E+04,	2.500000000E+07,	2.500000000E+10,	2.500000000E+13,
			6.350000000E+01,	7.620000000E+02,	2.286000000E+03,	4.023360000E+06,	2.500000000E-09,	2.500000000E-06,	2.500000000E-03,	2.500000000E+00,	2.500000000E+01,	2.500000000E+02,	2.500000000E+03,	2.500000000E+06,	2.500000000E+09,	2.500000000E+12,
			6.350000000E+00,	7.620000000E+01,	2.286000000E+02,	4.023360000E+05,	2.500000000E-10,	2.500000000E-07,	2.500000000E-04,	2.500000000E-01,	2.500000000E+00,	2.500000000E+01,	2.500000000E+02,	2.500000000E+05,	2.500000000E+08,	2.500000000E+11,
			6.350000000E-03,	7.620000000E-02,	2.286000000E-01,	4.023360000E+02,	2.500000000E-13,	2.500000000E-10,	2.500000000E-07,	2.500000000E-04,	2.500000000E-03,	2.500000000E-02,	2.500000000E-01,	2.500000000E+02,	2.500000000E+05,	2.500000000E+08,
			6.350000000E-06,	7.620000000E-05,	2.286000000E-04,	4.023360000E-01,	2.500000000E-16,	2.500000000E-13,	2.500000000E-10,	2.500000000E-07,	2.500000000E-06,	2.500000000E-05,	2.500000000E-04,	2.500000000E-01,	2.500000000E+02,	2.500000000E+05,
			6.350000000E-09,	7.620000000E-08,	2.286000000E-07,	4.023360000E-04,	2.500000000E-19,	2.500000000E-16,	2.500000000E-13,	2.500000000E-10,	2.500000000E-09,	2.500000000E-08,	2.500000000E-07,	2.500000000E-04,	2.500000000E-01,	2.500000000E+02
	
	};
	
	// 2,000,000 test
		double[] lengthData5 = {
				2.000000000E+06,	2.400000000E+07,	7.200000000E+07,	1.267200000E+11,	7.874015748E-05,	7.874015748E-02,	7.874015748E+01,	7.874015748E+04,	7.874015748E+05,	7.874015748E+06,	7.874015748E+07,	7.874015748E+10,	7.874015748E+13,	7.874015748E+16,
				1.666666700E+05,	2.000000000E+06,	6.000000000E+06,	1.056000000E+10,	6.561679790E-06,	6.561679790E-03,	6.561679790E+00,	6.561679790E+03,	6.561679790E+04,	6.561679790E+05,	6.561679790E+06,	6.561679790E+09,	6.561679790E+12,	6.561679790E+15,
				5.555555600E+04,	6.666666700E+05,	2.000000000E+06,	3.520000000E+09,	2.187226597E-06,	2.187226597E-03,	2.187226597E+00,	2.187226597E+03,	2.187226597E+04,	2.187226597E+05,	2.187226597E+06,	2.187226597E+09,	2.187226597E+12,	2.187226597E+15,
				3.156565700E+01,	3.787878800E+02,	1.136363600E+03,	2.000000000E+06,	1.242742384E-09,	1.242742384E-06,	1.242742384E-03,	1.242742384E+00,	1.242742384E+01,	1.242742384E+02,	1.242742384E+03,	1.242742384E+06,	1.242742384E+09,	1.242742384E+12,
				5.080000000E+16,	6.096000000E+17,	1.828800000E+18,	3.218688000E+21,	2.000000000E+06,	2.000000000E+09,	2.000000000E+12,	2.000000000E+15,	2.000000000E+16,	2.000000000E+17,	2.000000000E+18,	2.000000000E+21,	2.000000000E+24,	2.000000000E+27,
				5.080000000E+13,	6.096000000E+14,	1.828800000E+15,	3.218688000E+18,	2.000000000E+03,	2.000000000E+06,	2.000000000E+09,	2.000000000E+12,	2.000000000E+13,	2.000000000E+14,	2.000000000E+15,	2.000000000E+18,	2.000000000E+21,	2.000000000E+24,
				5.080000000E+10,	6.096000000E+11,	1.828800000E+12,	3.218688000E+15,	2.000000000E+00,	2.000000000E+03,	2.000000000E+06,	2.000000000E+09,	2.000000000E+10,	2.000000000E+11,	2.000000000E+12,	2.000000000E+15,	2.000000000E+18,	2.000000000E+21,
				5.080000000E+07,	6.096000000E+08,	1.828800000E+09,	3.218688000E+12,	2.000000000E-03,	2.000000000E+00,	2.000000000E+03,	2.000000000E+06,	2.000000000E+07,	2.000000000E+08,	2.000000000E+09,	2.000000000E+12,	2.000000000E+15,	2.000000000E+18,
				5.080000000E+06,	6.096000000E+07,	1.828800000E+08,	3.218688000E+11,	2.000000000E-04,	2.000000000E-01,	2.000000000E+02,	2.000000000E+05,	2.000000000E+06,	2.000000000E+07,	2.000000000E+08,	2.000000000E+11,	2.000000000E+14,	2.000000000E+17,
				5.080000000E+05,	6.096000000E+06,	1.828800000E+07,	3.218688000E+10,	2.000000000E-05,	2.000000000E-02,	2.000000000E+01,	2.000000000E+04,	2.000000000E+05,	2.000000000E+06,	2.000000000E+07,	2.000000000E+10,	2.000000000E+13,	2.000000000E+16,
				5.080000000E+04,	6.096000000E+05,	1.828800000E+06,	3.218688000E+09,	2.000000000E-06,	2.000000000E-03,	2.000000000E+00,	2.000000000E+03,	2.000000000E+04,	2.000000000E+05,	2.000000000E+06,	2.000000000E+09,	2.000000000E+12,	2.000000000E+15,
				5.080000000E+01,	6.096000000E+02,	1.828800000E+03,	3.218688000E+06,	2.000000000E-09,	2.000000000E-06,	2.000000000E-03,	2.000000000E+00,	2.000000000E+01,	2.000000000E+02,	2.000000000E+03,	2.000000000E+06,	2.000000000E+09,	2.000000000E+12,
				5.080000000E-02,	6.096000000E-01,	1.828800000E+00,	3.218688000E+03,	2.000000000E-12,	2.000000000E-09,	2.000000000E-06,	2.000000000E-03,	2.000000000E-02,	2.000000000E-01,	2.000000000E+00,	2.000000000E+03,	2.000000000E+06,	2.000000000E+09,
				5.080000000E-05,	6.096000000E-04,	1.828800000E-03,	3.218688000E+00,	2.000000000E-15,	2.000000000E-12,	2.000000000E-09,	2.000000000E-06,	2.000000000E-05,	2.000000000E-04,	2.000000000E-03,	2.000000000E+00,	2.000000000E+03,	2.000000000E+06
	
		};
	
	double[][] lengthData = {lengthData1, lengthData2, lengthData3, lengthData4, lengthData5};
	
	@Test
	public void testLengthFunctions() {
		
		// Iterate for each input test data.
		for(int m = 0; m < 5; m++) {
			int n = 0; // index of table
			// Iterate for each column.
			for(int i = 0; i < 14; i++){
				// Iterate for each row
				for(int j = 0; j < 14; j++) {
					// Get converted value.
					double result = LengthConverter.convertLength(lengthUnits[j], lengthUnits[i], testData[m]);
					
					// Round to 10 significant numbers
					BigDecimal bd = toSignificantFigures(BigDecimal.valueOf(result), 10);
					
					// Output to console test info.
					System.out.printf("Function %s to %s using input %.0f \n\t"
							+ "with expected value %f and actual value %f:\n\t\t",
							lengthUnits[j], lengthUnits[i], testData[m], lengthData[m][n], bd.doubleValue());
					
					// Test data
					assertEquals( lengthData[m][n], bd.doubleValue(), 1);
					System.out.println("passed.");
					
					n++;
				}
			}
		}
	}
	
	// For rounding to significant numbers
	public static BigDecimal toSignificantFigures(BigDecimal bd, int significantFigures){
	    String s = String.format("%."+significantFigures+"G", bd);
	    BigDecimal result = new BigDecimal(s);
	    return result;
	}

}
