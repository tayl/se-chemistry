package jpsteed.professionals.convertertests;

import static org.junit.Assert.*;

import java.math.BigDecimal;

import org.junit.Test;

import jpsteed.professionals.converters.ConversionLiterals.Unit;
import jpsteed.professionals.converters.VolumeConverter;

/**
 * Test VolumeConverter functions in package jpsteed.professionals.converters.
 * Using input values -2e6, -250, 0, 250, and 2e6.
 * @author John-Paul Steed
 * Tested March 31, 2016
 *
 */
public class VolumeTest {

	// Test input data.
	double[] testData = {-2e6, -250, 0, 250, 2e6};
	
	// Volume Units
	Unit[] volumeUnits = {Unit.CUBMILLIMETER, Unit.CUBCENTIMETER, Unit.CUBMETER,
			Unit.CUBKILOMETER, Unit.CUBFOOT, Unit.GALLON, Unit.QUART, Unit.CUP,
			Unit.LITER, Unit.MILLILITER, Unit.KILOLITER};

	// -2,000,000 test
	double[] volumeData1 = {
			-2.000000000E+06,	-2.000000000E+09,	-2.000000000E+15,	-2.000000000E+24,	-5.663369274E+13,	-7.570823636E+12,	-1.892705909E+12,	-4.731764772E+11,	-2.000000000E+12,	-2.000000000E+09,	-2.000000000E+15,
			-2.000000000E+03,	-2.000000000E+06,	-2.000000000E+12,	-2.000000000E+21,	-5.663369274E+10,	-7.570823636E+09,	-1.892705909E+09,	-4.731764772E+08,	-2.000000000E+09,	-2.000000000E+06,	-2.000000000E+12,
			-2.000000000E-03,	-2.000000000E+00,	-2.000000000E+06,	-2.000000000E+15,	-5.663369274E+04,	-7.570823636E+03,	-1.892705909E+03,	-4.731764772E+02,	-2.000000000E+03,	-2.000000000E+00,	-2.000000000E+06,
			-2.000000000E-12,	-2.000000000E-09,	-2.000000000E-03,	-2.000000000E+06,	-5.663369274E-05,	-7.570823636E-06,	-1.892705909E-06,	-4.731764772E-07,	-2.000000000E-06,	-2.000000000E-09,	-2.000000000E-03,
			-7.062933400E-02,	-7.062933400E+01,	-7.062933400E+07,	-7.062933400E+16,	-2.000000000E+06,	-2.673611225E+05,	-6.684027681E+04,	-1.671006973E+04,	-7.062933400E+04,	-7.062933400E+01,	-7.062933400E+07,
			-5.283441000E-01,	-5.283441000E+02,	-5.283441000E+08,	-5.283441000E+17,	-1.496103832E+07,	-2.000000000E+06,	-4.999999715E+05,	-1.250000000E+05,	-5.283441000E+05,	-5.283441000E+02,	-5.283441000E+08,
			-2.113376400E+00,	-2.113376400E+03,	-2.113376400E+09,	-2.113376400E+18,	-5.984415560E+07,	-8.000000456E+06,	-2.000000000E+06,	-5.000000000E+05,	-2.113376400E+06,	-2.113376400E+03,	-2.113376400E+09,
			-8.453505600E+00,	-8.453505600E+03,	-8.453505600E+09,	-8.453505600E+18,	-2.393766200E+08,	-3.200000000E+07,	-8.000000000E+06,	-2.000000000E+06,	-8.453505600E+06,	-8.453505600E+03,	-8.453505600E+09,
			-2.000000000E+00,	-2.000000000E+03,	-2.000000000E+09,	-2.000000000E+18,	-5.663369274E+07,	-7.570823636E+06,	-1.892705909E+06,	-4.731764772E+05,	-2.000000000E+06,	-2.000000000E+03,	-2.000000000E+09,
			-2.000000000E+03,	-2.000000000E+06,	-2.000000000E+12,	-2.000000000E+21,	-5.663369274E+10,	-7.570823636E+09,	-1.892705909E+09,	-4.731764772E+08,	-2.000000000E+09,	-2.000000000E+06,	-2.000000000E+12,
			-2.000000000E-03,	-2.000000000E+00,	-2.000000000E+06,	-2.000000000E+15,	-5.663369274E+04,	-7.570823636E+03,	-1.892705909E+03,	-4.731764772E+02,	-2.000000000E+03,	-2.000000000E+00,	-2.000000000E+06

	};
	
	// -250 test
	double[] volumeData2 = {
			-2.500000000E+02,	-2.500000000E+05,	-2.500000000E+11,	-2.500000000E+20,	-7.079211593E+09,	-9.463529545E+08,	-2.365882386E+08,	-5.914705965E+07,	-2.500000000E+08,	-2.500000000E+05,	-2.500000000E+11,
			-2.500000000E-01,	-2.500000000E+02,	-2.500000000E+08,	-2.500000000E+17,	-7.079211593E+06,	-9.463529545E+05,	-2.365882386E+05,	-5.914705965E+04,	-2.500000000E+05,	-2.500000000E+02,	-2.500000000E+08,
			-2.500000000E-07,	-2.500000000E-04,	-2.500000000E+02,	-2.500000000E+11,	-7.079211593E+00,	-9.463529545E-01,	-2.365882386E-01,	-5.914705965E-02,	-2.500000000E-01,	-2.500000000E-04,	-2.500000000E+02,
			-2.500000000E-16,	-2.500000000E-13,	-2.500000000E-07,	-2.500000000E+02,	-7.079211593E-09,	-9.463529545E-10,	-2.365882386E-10,	-5.914705965E-11,	-2.500000000E-10,	-2.500000000E-13,	-2.500000000E-07,
			-8.828666750E-06,	-8.828666750E-03,	-8.828666750E+03,	-8.828666750E+12,	-2.500000000E+02,	-3.342014031E+01,	-8.355034601E+00,	-2.088758716E+00,	-8.828666750E+00,	-8.828666750E-03,	-8.828666750E+03,
			-6.604301250E-05,	-6.604301250E-02,	-6.604301250E+04,	-6.604301250E+13,	-1.870129790E+03,	-2.500000000E+02,	-6.249999644E+01,	-1.562500000E+01,	-6.604301250E+01,	-6.604301250E-02,	-6.604301250E+04,
			-2.641720500E-04,	-2.641720500E-01,	-2.641720500E+05,	-2.641720500E+14,	-7.480519450E+03,	-1.000000057E+03,	-2.500000000E+02,	-6.250000000E+01,	-2.641720500E+02,	-2.641720500E-01,	-2.641720500E+05,
			-1.056688200E-03,	-1.056688200E+00,	-1.056688200E+06,	-1.056688200E+15,	-2.992207750E+04,	-4.000000000E+03,	-1.000000000E+03,	-2.500000000E+02,	-1.056688200E+03,	-1.056688200E+00,	-1.056688200E+06,
			-2.500000000E-04,	-2.500000000E-01,	-2.500000000E+05,	-2.500000000E+14,	-7.079211593E+03,	-9.463529545E+02,	-2.365882386E+02,	-5.914705965E+01,	-2.500000000E+02,	-2.500000000E-01,	-2.500000000E+05,
			-2.500000000E-01,	-2.500000000E+02,	-2.500000000E+08,	-2.500000000E+17,	-7.079211593E+06,	-9.463529545E+05,	-2.365882386E+05,	-5.914705965E+04,	-2.500000000E+05,	-2.500000000E+02,	-2.500000000E+08,
			-2.500000000E-07,	-2.500000000E-04,	-2.500000000E+02,	-2.500000000E+11,	-7.079211593E+00,	-9.463529545E-01,	-2.365882386E-01,	-5.914705965E-02,	-2.500000000E-01,	-2.500000000E-04,	-2.500000000E+02
	
	};
	
	// 0 test 
	double[] volumeData3 = new double[121];
	
	// 250 test
	double[] volumeData4 = {
			2.500000000E+02,	2.500000000E+05,	2.500000000E+11,	2.500000000E+20,	7.079211593E+09,	9.463529545E+08,	2.365882386E+08,	5.914705965E+07,	2.500000000E+08,	2.500000000E+05,	2.500000000E+11,
			2.500000000E-01,	2.500000000E+02,	2.500000000E+08,	2.500000000E+17,	7.079211593E+06,	9.463529545E+05,	2.365882386E+05,	5.914705965E+04,	2.500000000E+05,	2.500000000E+02,	2.500000000E+08,
			2.500000000E-07,	2.500000000E-04,	2.500000000E+02,	2.500000000E+11,	7.079211593E+00,	9.463529545E-01,	2.365882386E-01,	5.914705965E-02,	2.500000000E-01,	2.500000000E-04,	2.500000000E+02,
			2.500000000E-16,	2.500000000E-13,	2.500000000E-07,	2.500000000E+02,	7.079211593E-09,	9.463529545E-10,	2.365882386E-10,	5.914705965E-11,	2.500000000E-10,	2.500000000E-13,	2.500000000E-07,
			8.828666750E-06,	8.828666750E-03,	8.828666750E+03,	8.828666750E+12,	2.500000000E+02,	3.342014031E+01,	8.355034601E+00,	2.088758716E+00,	8.828666750E+00,	8.828666750E-03,	8.828666750E+03,
			6.604301250E-05,	6.604301250E-02,	6.604301250E+04,	6.604301250E+13,	1.870129790E+03,	2.500000000E+02,	6.249999644E+01,	1.562500000E+01,	6.604301250E+01,	6.604301250E-02,	6.604301250E+04,
			2.641720500E-04,	2.641720500E-01,	2.641720500E+05,	2.641720500E+14,	7.480519450E+03,	1.000000057E+03,	2.500000000E+02,	6.250000000E+01,	2.641720500E+02,	2.641720500E-01,	2.641720500E+05,
			1.056688200E-03,	1.056688200E+00,	1.056688200E+06,	1.056688200E+15,	2.992207750E+04,	4.000000000E+03,	1.000000000E+03,	2.500000000E+02,	1.056688200E+03,	1.056688200E+00,	1.056688200E+06,
			2.500000000E-04,	2.500000000E-01,	2.500000000E+05,	2.500000000E+14,	7.079211593E+03,	9.463529545E+02,	2.365882386E+02,	5.914705965E+01,	2.500000000E+02,	2.500000000E-01,	2.500000000E+05,
			2.500000000E-01,	2.500000000E+02,	2.500000000E+08,	2.500000000E+17,	7.079211593E+06,	9.463529545E+05,	2.365882386E+05,	5.914705965E+04,	2.500000000E+05,	2.500000000E+02,	2.500000000E+08,
			2.500000000E-07,	2.500000000E-04,	2.500000000E+02,	2.500000000E+11,	7.079211593E+00,	9.463529545E-01,	2.365882386E-01,	5.914705965E-02,	2.500000000E-01,	2.500000000E-04,	2.500000000E+02
	
	};
	
	// 2,000,000 test
	double[] volumeData5 = {
			2.000000000E+06,	2.000000000E+09,	2.000000000E+15,	2.000000000E+24,	5.663369274E+13,	7.570823636E+12,	1.892705909E+12,	4.731764772E+11,	2.000000000E+12,	2.000000000E+09,	2.000000000E+15,
			2.000000000E+03,	2.000000000E+06,	2.000000000E+12,	2.000000000E+21,	5.663369274E+10,	7.570823636E+09,	1.892705909E+09,	4.731764772E+08,	2.000000000E+09,	2.000000000E+06,	2.000000000E+12,
			2.000000000E-03,	2.000000000E+00,	2.000000000E+06,	2.000000000E+15,	5.663369274E+04,	7.570823636E+03,	1.892705909E+03,	4.731764772E+02,	2.000000000E+03,	2.000000000E+00,	2.000000000E+06,
			2.000000000E-12,	2.000000000E-09,	2.000000000E-03,	2.000000000E+06,	5.663369274E-05,	7.570823636E-06,	1.892705909E-06,	4.731764772E-07,	2.000000000E-06,	2.000000000E-09,	2.000000000E-03,
			7.062933400E-02,	7.062933400E+01,	7.062933400E+07,	7.062933400E+16,	2.000000000E+06,	2.673611225E+05,	6.684027681E+04,	1.671006973E+04,	7.062933400E+04,	7.062933400E+01,	7.062933400E+07,
			5.283441000E-01,	5.283441000E+02,	5.283441000E+08,	5.283441000E+17,	1.496103832E+07,	2.000000000E+06,	4.999999715E+05,	1.250000000E+05,	5.283441000E+05,	5.283441000E+02,	5.283441000E+08,
			2.113376400E+00,	2.113376400E+03,	2.113376400E+09,	2.113376400E+18,	5.984415560E+07,	8.000000456E+06,	2.000000000E+06,	5.000000000E+05,	2.113376400E+06,	2.113376400E+03,	2.113376400E+09,
			8.453505600E+00,	8.453505600E+03,	8.453505600E+09,	8.453505600E+18,	2.393766200E+08,	3.200000000E+07,	8.000000000E+06,	2.000000000E+06,	8.453505600E+06,	8.453505600E+03,	8.453505600E+09,
			2.000000000E+00,	2.000000000E+03,	2.000000000E+09,	2.000000000E+18,	5.663369274E+07,	7.570823636E+06,	1.892705909E+06,	4.731764772E+05,	2.000000000E+06,	2.000000000E+03,	2.000000000E+09,
			2.000000000E+03,	2.000000000E+06,	2.000000000E+12,	2.000000000E+21,	5.663369274E+10,	7.570823636E+09,	1.892705909E+09,	4.731764772E+08,	2.000000000E+09,	2.000000000E+06,	2.000000000E+12,
			2.000000000E-03,	2.000000000E+00,	2.000000000E+06,	2.000000000E+15,	5.663369274E+04,	7.570823636E+03,	1.892705909E+03,	4.731764772E+02,	2.000000000E+03,	2.000000000E+00,	2.000000000E+06
	
	};
	
	double[][] volumeData = {volumeData1, volumeData2, volumeData3, volumeData4, volumeData5};
	
	@Test
	public void testVolumeFunctions() {
		
		// Iterate for each input test data.
		for(int m = 0; m < 5; m++) {
			int n = 0; // index of table
			// Iterate for each column.
			for(int i = 0; i < 11; i++){
				// Iterate for each row
				for(int j = 0; j < 11; j++) {
					// Get converted value.
					double result = VolumeConverter.convertVolume(volumeUnits[j], volumeUnits[i], testData[m]);
					
					// Round to 10 significant numbers
					BigDecimal bd = toSignificantFigures(BigDecimal.valueOf(result), 10);
					
					// Output to console test info.
					System.out.printf("Function %s to %s using input %.0f \n\t"
							+ "with expected value %f and actual value %f:\n\t\t",
							volumeUnits[j], volumeUnits[i], testData[m], volumeData[m][n], bd.doubleValue());
					
					// Test data
					assertEquals( volumeData[m][n], bd.doubleValue(), 1);
					System.out.println("passed.");
					
					n++;
				}
			}
		}
	}
	
	// For rounding to significant numbers
	public static BigDecimal toSignificantFigures(BigDecimal bd, int significantFigures){
	    String s = String.format("%."+significantFigures+"G", bd);
	    BigDecimal result = new BigDecimal(s);
	    return result;
	}

}
