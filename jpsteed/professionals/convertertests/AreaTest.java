package jpsteed.professionals.convertertests;

import static org.junit.Assert.*;

import java.math.BigDecimal;

import org.junit.Test;

import jpsteed.professionals.converters.AreaConverter;
import jpsteed.professionals.converters.ConversionLiterals.Unit;

/**
 * Test AreaConverter functions in package jpsteed.professionals.converters.
 * Using input values -2e6, -250, 0, 250, and 2e6.
 * @author John-Paul Steed
 * Tested March 31, 2016
 *
 */
public class AreaTest {

	// Test input data.
	double[] testData = {-2e6, -250, 0, 250, 2e6};
	
	// Area Units
	Unit[] areaUnits = {Unit.ACRE, Unit.HECTARE, Unit.SQMETER, Unit.SQCENTIMETER,
			Unit.SQMILLIMETER, Unit.SQKILOMETER, Unit.SQMILE, Unit.SQINCH,
			Unit.SQFOOT, Unit.SQYARD};

	// -2,000,000 test
	double[] areaData1 = {
			-2.000000000E+06,	-4.942107629E+06,	-4.942107629E+02,	-4.942107629E-02,	-4.942107629E-04,	-4.942107629E+08,	-1.280000000E+09,	-3.188450158E-01,	-4.591368228E+01,	-4.132231405E+02,
			-8.093712845E+05,	-2.000000000E+06,	-2.000000000E+02,	-2.000000000E-02,	-2.000000000E-04,	-2.000000000E+08,	-5.179976221E+08,	-1.290320000E-01,	-1.858060800E+01,	-1.672254720E+02,
			-8.093712845E+09,	-2.000000000E+10,	-2.000000000E+06,	-2.000000000E+02,	-2.000000000E+00,	-2.000000000E+12,	-5.179976221E+12,	-1.290320000E+03,	-1.858060800E+05,	-1.672254720E+06,
			-8.093712845E+13,	-2.000000000E+14,	-2.000000000E+10,	-2.000000000E+06,	-2.000000000E+04,	-2.000000000E+16,	-5.179976221E+16,	-1.290320000E+07,	-1.858060800E+09,	-1.672254720E+10,
			-8.093712845E+15,	-2.000000000E+16,	-2.000000000E+12,	-2.000000000E+08,	-2.000000000E+06,	-2.000000000E+18,	-5.179976221E+18,	-1.290320000E+09,	-1.858060800E+11,	-1.672254720E+12,
			-8.093712845E+03,	-2.000000000E+04,	-2.000000000E+00,	-2.000000000E-04,	-2.000000000E-06,	-2.000000000E+06,	-5.179976221E+06,	-1.290320000E-03,	-1.858060800E-01,	-1.672254720E+00,
			-3.125000000E+03,	-7.722043171E+03,	-7.722043171E-01,	-7.722043171E-05,	-7.722043171E-07,	-7.722043171E+05,	-2.000000000E+06,	-4.981953372E-04,	-7.174012856E-02,	-6.456611570E-01,
			-1.254528000E+13,	-3.100006200E+13,	-3.100006200E+09,	-3.100006200E+05,	-3.100006200E+03,	-3.100006200E+15,	-8.028979200E+15,	-2.000000000E+06,	-2.880000000E+08,	-2.592000000E+09,
			-8.712000000E+10,	-2.152782083E+11,	-2.152782083E+07,	-2.152782083E+03,	-2.152782083E+01,	-2.152782083E+13,	-5.575680000E+13,	-1.388888889E+04,	-2.000000000E+06,	-1.800000000E+07,
			-9.680000000E+09,	-2.391980092E+10,	-2.391980092E+06,	-2.391980092E+02,	-2.391980092E+00,	-2.391980092E+12,	-6.195200000E+12,	-1.543209877E+03,	-2.222222222E+05,	-2.000000000E+06

	};
	
	// -250 test
	double[] areaData2 = {
			-2.500000000E+02,	-6.177634536E+02,	-6.177634536E-02,	-6.177634536E-06,	-6.177634536E-08,	-6.177634536E+04,	-1.600000000E+05,	-3.985562698E-05,	-5.739210285E-03,	-5.165289256E-02,
			-1.011714106E+02,	-2.500000000E+02,	-2.500000000E-02,	-2.500000000E-06,	-2.500000000E-08,	-2.500000000E+04,	-6.474970276E+04,	-1.612900000E-05,	-2.322576000E-03,	-2.090318400E-02,
			-1.011714106E+06,	-2.500000000E+06,	-2.500000000E+02,	-2.500000000E-02,	-2.500000000E-04,	-2.500000000E+08,	-6.474970276E+08,	-1.612900000E-01,	-2.322576000E+01,	-2.090318400E+02,
			-1.011714106E+10,	-2.500000000E+10,	-2.500000000E+06,	-2.500000000E+02,	-2.500000000E+00,	-2.500000000E+12,	-6.474970276E+12,	-1.612900000E+03,	-2.322576000E+05,	-2.090318400E+06,
			-1.011714106E+12,	-2.500000000E+12,	-2.500000000E+08,	-2.500000000E+04,	-2.500000000E+02,	-2.500000000E+14,	-6.474970276E+14,	-1.612900000E+05,	-2.322576000E+07,	-2.090318400E+08,
			-1.011714106E+00,	-2.500000000E+00,	-2.500000000E-04,	-2.500000000E-08,	-2.500000000E-10,	-2.500000000E+02,	-6.474970276E+02,	-1.612900000E-07,	-2.322576000E-05,	-2.090318400E-04,
			-3.906250000E-01,	-9.652553964E-01,	-9.652553964E-05,	-9.652553964E-09,	-9.652553964E-11,	-9.652553964E+01,	-2.500000000E+02,	-6.227441715E-08,	-8.967516070E-06,	-8.070764463E-05,
			-1.568160000E+09,	-3.875007750E+09,	-3.875007750E+05,	-3.875007750E+01,	-3.875007750E-01,	-3.875007750E+11,	-1.003622400E+12,	-2.500000000E+02,	-3.600000000E+04,	-3.240000000E+05,
			-1.089000000E+07,	-2.690977604E+07,	-2.690977604E+03,	-2.690977604E-01,	-2.690977604E-03,	-2.690977604E+09,	-6.969600000E+09,	-1.736111111E+00,	-2.500000000E+02,	-2.250000000E+03,
			-1.210000000E+06,	-2.989975115E+06,	-2.989975115E+02,	-2.989975115E-02,	-2.989975115E-04,	-2.989975115E+08,	-7.744000000E+08,	-1.929012346E-01,	-2.777777778E+01,	-2.500000000E+02

	};
	
	// 0 test 
	double[] areaData3 = new double[100];
	
	// 250 test
	double[] areaData4 = {
			2.500000000E+02,	6.177634536E+02,	6.177634536E-02,	6.177634536E-06,	6.177634536E-08,	6.177634536E+04,	1.600000000E+05,	3.985562698E-05,	5.739210285E-03,	5.165289256E-02,
			1.011714106E+02,	2.500000000E+02,	2.500000000E-02,	2.500000000E-06,	2.500000000E-08,	2.500000000E+04,	6.474970276E+04,	1.612900000E-05,	2.322576000E-03,	2.090318400E-02,
			1.011714106E+06,	2.500000000E+06,	2.500000000E+02,	2.500000000E-02,	2.500000000E-04,	2.500000000E+08,	6.474970276E+08,	1.612900000E-01,	2.322576000E+01,	2.090318400E+02,
			1.011714106E+10,	2.500000000E+10,	2.500000000E+06,	2.500000000E+02,	2.500000000E+00,	2.500000000E+12,	6.474970276E+12,	1.612900000E+03,	2.322576000E+05,	2.090318400E+06,
			1.011714106E+12,	2.500000000E+12,	2.500000000E+08,	2.500000000E+04,	2.500000000E+02,	2.500000000E+14,	6.474970276E+14,	1.612900000E+05,	2.322576000E+07,	2.090318400E+08,
			1.011714106E+00,	2.500000000E+00,	2.500000000E-04,	2.500000000E-08,	2.500000000E-10,	2.500000000E+02,	6.474970276E+02,	1.612900000E-07,	2.322576000E-05,	2.090318400E-04,
			3.906250000E-01,	9.652553964E-01,	9.652553964E-05,	9.652553964E-09,	9.652553964E-11,	9.652553964E+01,	2.500000000E+02,	6.227441715E-08,	8.967516070E-06,	8.070764463E-05,
			1.568160000E+09,	3.875007750E+09,	3.875007750E+05,	3.875007750E+01,	3.875007750E-01,	3.875007750E+11,	1.003622400E+12,	2.500000000E+02,	3.600000000E+04,	3.240000000E+05,
			1.089000000E+07,	2.690977604E+07,	2.690977604E+03,	2.690977604E-01,	2.690977604E-03,	2.690977604E+09,	6.969600000E+09,	1.736111111E+00,	2.500000000E+02,	2.250000000E+03,
			1.210000000E+06,	2.989975115E+06,	2.989975115E+02,	2.989975115E-02,	2.989975115E-04,	2.989975115E+08,	7.744000000E+08,	1.929012346E-01,	2.777777778E+01,	2.500000000E+02
	
	};
	
	// 2,000,000 test
	double[] areaData5 = {
			2.000000000E+06,	4.942107629E+06,	4.942107629E+02,	4.942107629E-02,	4.942107629E-04,	4.942107629E+08,	1.280000000E+09,	3.188450158E-01,	4.591368228E+01,	4.132231405E+02,
			8.093712845E+05,	2.000000000E+06,	2.000000000E+02,	2.000000000E-02,	2.000000000E-04,	2.000000000E+08,	5.179976221E+08,	1.290320000E-01,	1.858060800E+01,	1.672254720E+02,
			8.093712845E+09,	2.000000000E+10,	2.000000000E+06,	2.000000000E+02,	2.000000000E+00,	2.000000000E+12,	5.179976221E+12,	1.290320000E+03,	1.858060800E+05,	1.672254720E+06,
			8.093712845E+13,	2.000000000E+14,	2.000000000E+10,	2.000000000E+06,	2.000000000E+04,	2.000000000E+16,	5.179976221E+16,	1.290320000E+07,	1.858060800E+09,	1.672254720E+10,
			8.093712845E+15,	2.000000000E+16,	2.000000000E+12,	2.000000000E+08,	2.000000000E+06,	2.000000000E+18,	5.179976221E+18,	1.290320000E+09,	1.858060800E+11,	1.672254720E+12,
			8.093712845E+03,	2.000000000E+04,	2.000000000E+00,	2.000000000E-04,	2.000000000E-06,	2.000000000E+06,	5.179976221E+06,	1.290320000E-03,	1.858060800E-01,	1.672254720E+00,
			3.125000000E+03,	7.722043171E+03,	7.722043171E-01,	7.722043171E-05,	7.722043171E-07,	7.722043171E+05,	2.000000000E+06,	4.981953372E-04,	7.174012856E-02,	6.456611570E-01,
			1.254528000E+13,	3.100006200E+13,	3.100006200E+09,	3.100006200E+05,	3.100006200E+03,	3.100006200E+15,	8.028979200E+15,	2.000000000E+06,	2.880000000E+08,	2.592000000E+09,
			8.712000000E+10,	2.152782083E+11,	2.152782083E+07,	2.152782083E+03,	2.152782083E+01,	2.152782083E+13,	5.575680000E+13,	1.388888889E+04,	2.000000000E+06,	1.800000000E+07,
			9.680000000E+09,	2.391980092E+10,	2.391980092E+06,	2.391980092E+02,	2.391980092E+00,	2.391980092E+12,	6.195200000E+12,	1.543209877E+03,	2.222222222E+05,	2.000000000E+06
	
	};
	
	double[][] areaData = {areaData1, areaData2, areaData3, areaData4, areaData5};
	
	@Test
	public void testAreaFunctions() {
		
		// Iterate for each input test data.
		for(int m = 0; m < 5; m++) {
			int n = 0; // index of table
			// Iterate for each column.
			for(int i = 0; i < 10; i++){
				// Iterate for each row
				for(int j = 0; j < 10; j++) {
					// Get converted value.
					double result = AreaConverter.convertArea(areaUnits[j], areaUnits[i], testData[m]);
					
					// Round to 10 significant numbers
					BigDecimal bd = toSignificantFigures(BigDecimal.valueOf(result), 10);
					
					// Output to console test info.
					System.out.printf("Function %s to %s using input %.0f \n\t"
							+ "with expected value %f and actual value %f:\n\t\t",
							areaUnits[j], areaUnits[i], testData[m], areaData[m][n], bd.doubleValue());
					
					// Test data
					assertEquals( areaData[m][n], bd.doubleValue(), 1);
					System.out.println("passed.");
					
					n++;
				}
			}
		}
	}
	
	// For rounding to significant numbers
	public static BigDecimal toSignificantFigures(BigDecimal bd, int significantFigures){
	    String s = String.format("%."+significantFigures+"G", bd);
	    BigDecimal result = new BigDecimal(s);
	    return result;
	}
}

